package b_question;

import java.util.Scanner;

public class B1110 {

	public static void main(String[] args) {
		// 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고, 
		// 각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.
		// 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 
		// 새로운 수는 26이다.
		// 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
		// N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.
		
		Scanner scan = new Scanner(System.in);
		
		int n = scan.nextInt();
		
		int first = n; // 입력받은 숫자를 담음
		int count = 0; 
		
		while(true) { 
			// 숫자n의 1의 자리수는 다음수의 10의 자리수가 되고,n의 10의 자리와 1의자리수를 더한 값이 다음수의 1의 자리로 간다.
			// (n % 10) * 10)				: 숫자n을 10으로 나누면 n의 1의 자릿수가 나머지가 되고 그 나머지를 10과 곱하면 십의 자리수가 된다.
			// ((n / 10) + (n % 10)) % 10	: 숫자n을 10으로 나눈 몫은 n의 십의 자리수가 나온다. 10으로 나눈 나머지는  n의 1의 자리수가 나온다. 
			//								그 두 수를 합하여 10으로 나눈 나머지가 일의 자리수가 된다.
			// 여기서 나온 십의 자리수와 일의 자리수를 합하면 다음수가 된다.
			n = ((n % 10) * 10) + (((n / 10) + (n % 10)) % 10); 
			count++; // 사이클 길이를 구하기 위해 증감연산자 사용해서 카운트 해준다.
			if ( first == n ) { // 입력받은 숫자를 담은 first변수와 숫자n을 비교하여 같으면 루프문 탈출
				break; 
				} 
			} 
		
			System.out.println(count); 

	
		
		
		
		scan.close();
	}

}
